{"ast":null,"code":"var _jsxFileName = \"/Users/rollcall/RollCallCode/rollcall-gpt-final/frontend/rollcall-gpt-react/src/App.js\";\nimport React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport ParentApp from \"./ParentApp\";\nimport \"./Chat.css\";\nimport SettingsTraining from \"./SettingsTraining\";\nimport Home from \"./Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/\",\n        element: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 34\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/parent\",\n        element: /*#__PURE__*/_jsxDEV(ParentApp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 16,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n}\n\n// function App() {\n//   const [message, setMessage] = useState(\"\");\n//   const [response, setResponse] = useState(\"\");\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     fetch(process.env.REACT_APP_BACKEND_URL, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ message }),\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setResponse(data.message);\n//         setMessages((prev) => [\n//           ...prev,\n//           { type: \"user\", content: message },\n//           { type: \"bot\", content: data.message },\n//         ]);\n//         setMessage(\"\");\n//         setLoading(false);\n//       });\n//   };\n\n//   const formatBotMessage = (content) => {\n//     const lines = content.split(\"\\n\");\n//     let listItems = [];\n//     const elements = [];\n\n//     lines.forEach((line, index) => {\n//       const match = line.match(/^(\\d+)\\.\\s(.*)$/);\n\n//       if (match) {\n//         const [, , text] = match;\n//         listItems.push(<li key={`li-${index}`}>{text}</li>);\n//       } else {\n//         if (listItems.length > 0) {\n//           elements.push(<ul key={`ul-${elements.length}`}>{listItems}</ul>);\n//           listItems = [];\n//         }\n//         elements.push(<p key={`p-${index}`}>{line}</p>);\n//       }\n//     });\n\n//     if (listItems.length > 0) {\n//       elements.push(<ul key={`ul-${elements.length}`}>{listItems}</ul>);\n//     }\n\n//     return <div>{elements}</div>;\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <nav className=\"navbar\">\n//         <div className=\"nav-tabs\">\n//           <a href=\"/login\" className=\"nav-tab\">\n//             Login\n//           </a>\n//           <a href=\"/parent-app\" className=\"nav-tab\">\n//             Parent App\n//           </a>\n//         </div>\n//         <a href=\"/\" className=\"logo\">\n//           <img\n//             src=\"https://rollcall.com.au/wp-content/uploads/2018/08/cropped-RollCall-logo-sml-02.png\"\n//             alt=\"Your Logo\"\n//             style={{ width: \"100px\" }}\n//           />\n//         </a>\n//       </nav>\n//       <div className=\"chat-window\">\n//         {messages.map((msg, i) => (\n//           <div\n//             key={i}\n//             className={`message-wrapper ${\n//               msg.type === \"user\"\n//                 ? \"user-message-wrapper\"\n//                 : \"bot-message-wrapper\"\n//             }`}\n//           >\n//             <div\n//               className={`${msg.type === \"user\" ? \"user-name\" : \"bot-name\"}`}\n//             >\n//               {msg.type === \"user\" ? \"John\" : \"Ange\"}\n//             </div>\n//             <div\n//               className={`message ${\n//                 msg.type === \"user\" ? \"user-message\" : \"bot-message\"\n//               }`}\n//             >\n//               {msg.type === \"bot\" ? formatBotMessage(msg.content) : msg.content}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleSubmit} className=\"form-container\">\n//         <textarea\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           className=\"message-input\"\n//           placeholder=\"Type your message...\"\n//         ></textarea>\n//         <button type=\"submit\" className=\"submit-button\" disabled={loading}>\n//           {loading ? <div className=\"loader\"></div> : \"Send\"}\n//         </button>\n//         {loading && <div className=\"typing-bubble\">Ange is typing...</div>}\n//       </form>\n//     </div>\n//   );\n// }\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","BrowserRouter","Router","Route","Routes","Link","Login","ParentApp","SettingsTraining","Home","jsxDEV","_jsxDEV","App","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rollcall/RollCallCode/rollcall-gpt-final/frontend/rollcall-gpt-react/src/App.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { BrowserRouter as Router, Route, Routes, Link } from \"react-router-dom\";\nimport Login from \"./Login\";\nimport ParentApp from \"./ParentApp\";\n\nimport \"./Chat.css\";\nimport SettingsTraining from \"./SettingsTraining\";\nimport Home from \"./Home\";\n\nfunction App() {\n  return (\n    <Router>\n      <Routes>\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/parent\" element={<ParentApp />} />\n      </Routes>\n    </Router>\n  );\n}\n\n// function App() {\n//   const [message, setMessage] = useState(\"\");\n//   const [response, setResponse] = useState(\"\");\n//   const [messages, setMessages] = useState([]);\n//   const [loading, setLoading] = useState(false);\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n//     setLoading(true);\n//     fetch(process.env.REACT_APP_BACKEND_URL, {\n//       method: \"POST\",\n//       headers: {\n//         \"Content-Type\": \"application/json\",\n//       },\n//       body: JSON.stringify({ message }),\n//     })\n//       .then((res) => res.json())\n//       .then((data) => {\n//         setResponse(data.message);\n//         setMessages((prev) => [\n//           ...prev,\n//           { type: \"user\", content: message },\n//           { type: \"bot\", content: data.message },\n//         ]);\n//         setMessage(\"\");\n//         setLoading(false);\n//       });\n//   };\n\n//   const formatBotMessage = (content) => {\n//     const lines = content.split(\"\\n\");\n//     let listItems = [];\n//     const elements = [];\n\n//     lines.forEach((line, index) => {\n//       const match = line.match(/^(\\d+)\\.\\s(.*)$/);\n\n//       if (match) {\n//         const [, , text] = match;\n//         listItems.push(<li key={`li-${index}`}>{text}</li>);\n//       } else {\n//         if (listItems.length > 0) {\n//           elements.push(<ul key={`ul-${elements.length}`}>{listItems}</ul>);\n//           listItems = [];\n//         }\n//         elements.push(<p key={`p-${index}`}>{line}</p>);\n//       }\n//     });\n\n//     if (listItems.length > 0) {\n//       elements.push(<ul key={`ul-${elements.length}`}>{listItems}</ul>);\n//     }\n\n//     return <div>{elements}</div>;\n//   };\n\n//   return (\n//     <div className=\"chat-container\">\n//       <nav className=\"navbar\">\n//         <div className=\"nav-tabs\">\n//           <a href=\"/login\" className=\"nav-tab\">\n//             Login\n//           </a>\n//           <a href=\"/parent-app\" className=\"nav-tab\">\n//             Parent App\n//           </a>\n//         </div>\n//         <a href=\"/\" className=\"logo\">\n//           <img\n//             src=\"https://rollcall.com.au/wp-content/uploads/2018/08/cropped-RollCall-logo-sml-02.png\"\n//             alt=\"Your Logo\"\n//             style={{ width: \"100px\" }}\n//           />\n//         </a>\n//       </nav>\n//       <div className=\"chat-window\">\n//         {messages.map((msg, i) => (\n//           <div\n//             key={i}\n//             className={`message-wrapper ${\n//               msg.type === \"user\"\n//                 ? \"user-message-wrapper\"\n//                 : \"bot-message-wrapper\"\n//             }`}\n//           >\n//             <div\n//               className={`${msg.type === \"user\" ? \"user-name\" : \"bot-name\"}`}\n//             >\n//               {msg.type === \"user\" ? \"John\" : \"Ange\"}\n//             </div>\n//             <div\n//               className={`message ${\n//                 msg.type === \"user\" ? \"user-message\" : \"bot-message\"\n//               }`}\n//             >\n//               {msg.type === \"bot\" ? formatBotMessage(msg.content) : msg.content}\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//       <form onSubmit={handleSubmit} className=\"form-container\">\n//         <textarea\n//           value={message}\n//           onChange={(e) => setMessage(e.target.value)}\n//           className=\"message-input\"\n//           placeholder=\"Type your message...\"\n//         ></textarea>\n//         <button type=\"submit\" className=\"submit-button\" disabled={loading}>\n//           {loading ? <div className=\"loader\"></div> : \"Send\"}\n//         </button>\n//         {loading && <div className=\"typing-bubble\">Ange is typing...</div>}\n//       </form>\n//     </div>\n//   );\n// }\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,aAAa,IAAIC,MAAM,EAAEC,KAAK,EAAEC,MAAM,EAAEC,IAAI,QAAQ,kBAAkB;AAC/E,OAAOC,KAAK,MAAM,SAAS;AAC3B,OAAOC,SAAS,MAAM,aAAa;AAEnC,OAAO,YAAY;AACnB,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA,CAACT,MAAM;IAAAW,QAAA,eACLF,OAAA,CAACP,MAAM;MAAAS,QAAA,gBACLF,OAAA,CAACR,KAAK;QAACW,IAAI,EAAC,QAAQ;QAACC,OAAO,eAAEJ,OAAA,CAACL,KAAK;UAAAU,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAI;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eAC3CR,OAAA,CAACR,KAAK;QAACW,IAAI,EAAC,GAAG;QAACC,OAAO,eAAEJ,OAAA,CAACF,IAAI;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAI;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACrCR,OAAA,CAACR,KAAK;QAACW,IAAI,EAAC,SAAS;QAACC,OAAO,eAAEJ,OAAA,CAACJ,SAAS;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAI;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EACzC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACF;AAEbgIZ,eAAeA,GAAG;AAAC,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}